{
  "schemaVersion": 2,
  "components": [
    {
      "text": "# Run CI Pipeline and QA\n\n[https://github.com/camunda-cloud/zeebe/wiki/Release-protocol#perform-quality-assurance](https://github.com/camunda-cloud/zeebe/wiki/Release-protocol#perform-quality-assurance)\n\n\n#### Run the CI pipeline (Automatically triggered when the branch is created)\n\nOur CI pipeline runs in an internal Jenkins, [here](https://ci.zeebe.camunda.cloud/job/camunda-cloud/job/zeebe/). The first thing you want to verify after creating the release branch is to verify that it builds and passes our CI pipeline. While it may take a little bit, eventually there will be a new Jenkins job which is building your branch, typically at the following URL: https://ci.zeebe.camunda.cloud/job/camunda-cloud/job/zeebe/job/release-X.Y.Z/. The job should already be building automatically after you pushed the branch, but if it isn't, you can always start a new build manually by clicking on `Run with parameters` and keeping the defaults.\n\n#### Run the Testbench QA\n\nWe make heavy use of [Testbench](https://github.com/zeebe-io/zeebe-cluster-testbench) for our QA as well, and we want to run those tests against the release branch as well. **From the Jenkins job, start a new build via `Run with parameters`, but this time check `SKIP_VERIFY` and also check `RUN_QA`.** This will start a build which will skip the normal automated tests (which we ran in the previous step), and instead just stage the release artifacts and run the tests in Camunda Cloud. You can then track the tests in [Operate](https://bru-1.operate.ultrawombat.com/383e5e2d-05a9-4feb-9926-02f538aa80ea/) - filter the running instances by businessKey, with the value being the Jenkins build URL. \n\nHints:\n- The QA run will use the Zeebe image built by Jenkins from your branch. However, it needs to know the equivalent Operate, Tasklist, Elasticsearch, etc., versions to use in conjunction when spinning up a new cluster in the cloud. To solve this, we specify a _template_ generation which has all these things.\n- The template generation is used to set the version of Operate/Elasticsearch for the QA run. This must be a generation which already exists in Cloud on Int stage. It should also fit to the version you release (so if the next release is 0.24.2 the template generation probably is 0.24.1). You can check which generations exist in the Int stage using the cloud console (check under 'Generations' in the Document of Truth).\n- Jenkins will be notified of the result of the tests. If any test fails, the Jenkins build fails and test reports are available in the Google Sheet and a message is posted to Slack. Both Slack and Google Sheet contain a link to the build that started the QA run.\n- If the build gets stuck, have a look at Operate to see whether any incidents were raised. This is the one missing loophole, because Jenkins has no way of knowing when incidents were created\n\n",
      "type": "text",
      "id": "Field_17jz7bk"
    },
    {
      "label": "Jenkins Build Link",
      "type": "textfield",
      "id": "Field_1ocluvy",
      "key": "qa_build_jenkins_url",
      "validate": {
        "required": true
      },
      "description": "Add the link to jenkins build job"
    }
  ],
  "type": "default",
  "id": "qa_build",
  "executionPlatform": "Camunda Cloud",
  "executionPlatformVersion": "1.2"
}