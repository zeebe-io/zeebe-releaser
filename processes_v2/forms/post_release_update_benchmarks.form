{
  "schemaVersion": 2,
  "components": [
    {
      "text": "# Update benchmarks\nAs part of our continuous testing efforts, we also run long running load tests for the various supported versions:\n\n- One benchmark for the latest alpha version\n- One benchmark for each supported minor version (updated to their latest patch release)\n\nOnce a new version is released, we need to update all of these benchmarks depending on the release type. _Only execute the steps below for the release type that you are performing!_\n\nLong running benchmark deployments can be found in the main repository by checking out the branch `medic-cw-benchmarks`, under `benchmarks/setup`. There you will find a folder with the name of the benchmark. Each release benchmark is prefixed with `release-`, and then the version _with dashes instead of periods as separator_, e.g. `release-1-0-1` or `release-2-3-1-alpha1`. [See our documentation for more](https://github.com/camunda-cloud/zeebe/tree/develop/benchmarks/setup).\n\nAs a first step, checkout this branch and navigate there. Then set the Kubernetes context to the long running cluster, where the long running load tests live.\n\n```sh\ngit checkout medic-cw-benchmarks\ncd benchmarks/setup\nkubectx gke_zeebe-io_europe-west1-b_zeebe-long-running\n```\n\n#### ALPHA\n\nIf performing an alpha release, the first step is to remove the load test for the previous alpha release. From the `benchmarks/setup` folder, we can use the script `./deleteBenchmark.sh` for this.\n\n```sh\n./deleteBenchmark.sh release-MAJOR-MINOR-ALPHA\n```\n\nFor example, if you're releasing `1.2.0-alpha2`, then you would be deleting the previous `1.2.0-alpha1` benchmark, e.g. `./deleteBenchmark release-1-2-alpha1`.\n\nOnce done, we need to create a new benchmark for your version.\n\n```sh\n./newBenchmark.sh release-MAJOR-MINOR-ALPHA\n```\n\nThen update the Zeebe, worker, and starter image tags. Navigate to your benchmark folder, and from there:\n\n- Open `zeebe-values.yaml`\n- Set `image.tag` to `MAJOR.MINOR.PATCH-ALPHA`, e.g. `1.1.2`\n- Save and exit\n- Open `worker.yaml`\n- Set `spec.template.spec.containers[0].image` to `gcr.io/zeebe-io/worker:MAJOR.MINOR.PATCH-ALPHA`\n- Save and exit\n- Open `starter.yaml`\n- Set `spec.template.spec.containers[0].image` to `gcr.io/zeebe-io/starter:MAJOR.MINOR.PATCH-ALPHA`\n- Save and exit\n\nThen start the benchmark. Verify that it's running properly by [checking the long-running Grafana](http://35.189.240.202)\n\n```sh\nmake zeebe worker starter\n```\n\n#### PATCH\n\nIf performing a patch release, simply update the existing benchmark for the same minor version. This means, if you are releasing 1.1.2, then you would update the existing 1.1.1 benchmark. To update a benchmark, navigate to the existing benchmark folder (in our example, you would go to `release-1-1`). From there, update the Zeebe image tag.\n\n- Open `zeebe-values.yaml`\n- Set `image.tag` to `MAJOR.MINOR.PATCH-ALPHA`, e.g. `1.1.2`\n- Save and exit\n- Open `worker.yaml`\n- Set `spec.template.spec.containers[0].image` to `gcr.io/zeebe-io/worker:MAJOR.MINOR.PATCH-ALPHA`\n- Save and exit\n- Open `starter.yaml`\n- Set `spec.template.spec.containers[0].image` to `gcr.io/zeebe-io/starter:MAJOR.MINOR.PATCH-ALPHA`\n- Save and exit\n\nAfterwards, we need to update the Helm release by running the following. Be sure the update the version in the release name, e.g. `release-1-1`.\n\n```sh\nhelm upgrade release-MAJOR-MINOR camundacloud/zeebe-cluster-helm --reuse-values -f zeebe-values.yaml --skip-crds\nmake worker starter\n```\n\nIf you need to update the clients, you will also have to update the `starter.yaml` and `worker.yaml`, updating their image tags as well. Refer to the benchmarks documentation for this. But for patch releases, this shouldn't be necessary in most cases.\n\nVerify that it's running properly by [checking the long-running Grafana](http://35.189.240.202)\n\n#### MINOR\n\nIf you're performing a minor release, the first step is to delete the oldest minor load test - that is, for the version which will stop being supported. From the `benchmarks/setup` folder, we can use the script `./deleteBenchmark.sh` for this.\n\n```sh\n./deleteBenchmark.sh release-MAJOR-MINOR\n```\n\nFor example, with our current 3 months release cadence, if you're releasing `1.2.0`, then you would be deleting the previous `1.0.0` benchmark, e.g. `./deleteBenchmark release-1-0`.\n\nOnce done, we need to create a new benchmark for your version.\n\n```sh\n./newBenchmark.sh release-MAJOR-MINOR\n```\n\nThen update the Zeebe, worker, and starter image tags. Navigate to your benchmark folder, and from there:\n\n- Open `zeebe-values.yaml`\n- Set `image.tag` to `MAJOR.MINOR.0`, e.g. `1.1.0`\n- Save and exit\n- Open `worker.yaml`\n- Set `spec.template.spec.containers[0].image` to `gcr.io/zeebe-io/worker:MAJOR.MINOR.0`\n- Save and exit\n- Open `starter.yaml`\n- Set `spec.template.spec.containers[0].image` to `gcr.io/zeebe-io/starter:MAJOR.MINOR.0`\n- Save and exit\n\nThen start the benchmark.\n\n```sh\nmake zeebe worker starter\n```\n\nVerify that it's running properly by [checking the long-running Grafana](http://35.189.240.202)\n\n#### Commit the benchmark files\n\nAt the end, when the benchmark is running correctly, remember to commit the benchmark setup files.\n\n```sh\ngit add release-MAJOR-MINOR-ALPHA\ngit commit -m\"test(benchmark): setup MAJOR.MINOR.PATCH.ALPHA benchmark\"\ngit push\n```",
      "type": "text",
      "id": "Field_1rfqdzy"
    }
  ],
  "type": "default",
  "id": "Form_0qq681s"
}